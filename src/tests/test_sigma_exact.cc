/*
 * Copyright 2009-2018 The VOTCA Development Team (http://www.votca.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
#define BOOST_TEST_MAIN

#define BOOST_TEST_MODULE sigma_test
#include <boost/test/unit_test.hpp>
#include <fstream>
#include <votca/xtp/aobasis.h>
#include <votca/xtp/orbitals.h>
#include <votca/xtp/rpa.h>
#include <votca/xtp/sigma_spectral.h>
#include <votca/xtp/threecenter.h>

using namespace votca::xtp;
using namespace std;

BOOST_AUTO_TEST_SUITE(sigma_test)

BOOST_AUTO_TEST_CASE(sigma_full) {

  ofstream xyzfile("molecule.xyz");
  xyzfile << " 5" << endl;
  xyzfile << " methane" << endl;
  xyzfile << " C            .000000     .000000     .000000" << endl;
  xyzfile << " H            .629118     .629118     .629118" << endl;
  xyzfile << " H           -.629118    -.629118     .629118" << endl;
  xyzfile << " H            .629118    -.629118    -.629118" << endl;
  xyzfile << " H           -.629118     .629118    -.629118" << endl;
  xyzfile.close();

  ofstream basisfile("3-21G.xml");
  basisfile << "<basis name=\"3-21G\">" << endl;
  basisfile << "  <element name=\"H\">" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"5.447178e+00\">" << endl;
  basisfile << "        <contractions factor=\"1.562850e-01\" type=\"S\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"8.245470e-01\">" << endl;
  basisfile << "        <contractions factor=\"9.046910e-01\" type=\"S\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"1.831920e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"S\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "  </element>" << endl;
  basisfile << "  <element name=\"C\">" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"1.722560e+02\">" << endl;
  basisfile << "        <contractions factor=\"6.176690e-02\" type=\"S\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"2.591090e+01\">" << endl;
  basisfile << "        <contractions factor=\"3.587940e-01\" type=\"S\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"5.533350e+00\">" << endl;
  basisfile << "        <contractions factor=\"7.007130e-01\" type=\"S\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"SP\">" << endl;
  basisfile << "      <constant decay=\"3.664980e+00\">" << endl;
  basisfile << "        <contractions factor=\"-3.958970e-01\" type=\"S\"/>"
            << endl;
  basisfile << "        <contractions factor=\"2.364600e-01\" type=\"P\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"7.705450e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.215840e+00\" type=\"S\"/>"
            << endl;
  basisfile << "        <contractions factor=\"8.606190e-01\" type=\"P\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"SP\">" << endl;
  basisfile << "      <constant decay=\"1.958570e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"S\"/>"
            << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"P\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "  </element>" << endl;
  basisfile << "</basis>" << endl;
  basisfile.close();

  Orbitals orbitals;
  orbitals.LoadFromXYZ("molecule.xyz");
  BasisSet basis;
  basis.LoadBasisSet("3-21G.xml");

  AOBasis aobasis;
  aobasis.AOBasisFill(basis, orbitals.QMAtoms());

  Eigen::VectorXd mo_energy = Eigen::VectorXd::Zero(17);
  mo_energy << 0.0468207, 0.0907801, 0.0907801, 0.104563, 0.592491, 0.663355,
      0.663355, 0.768373, 1.69292, 1.97724, 1.97724, 2.50877, 2.98732, 3.4418,
      3.4418, 4.81084, 17.1838;

  Eigen::MatrixXd MOs = Eigen::MatrixXd::Zero(17, 17);
  MOs << 0.0185815, 2.9133e-17, 8.49354e-17, -0.00312916, 0.0420075,
      1.11356e-16, 1.85886e-17, -0.0334732, 0.0485113, -8.71556e-18,
      -3.79994e-17, -0.0346485, -0.0248392, -3.32286e-22, -4.62643e-17,
      0.0144472, 0.996183, 0.166534, 2.80578e-16, 7.85515e-16, -0.0299557,
      0.409156, 1.10045e-15, 1.67666e-16, -0.336895, 0.608646, -1.00343e-16,
      -5.04622e-16, -0.437568, -0.299751, -2.77682e-17, -6.06812e-16, 0.176594,
      -0.0866677, 0.0010572, -0.0210402, -0.0345975, 0.035778, 0.0611836,
      0.0374747, -0.154443, 0.0892921, 0.0842611, -0.35309, -0.0759572,
      0.278374, -0.409082, -0.64367, 0.308248, -0.261525, -0.000315534,
      -0.0010572, -0.0404824, 0.000922593, -0.035778, -0.0611836, -0.115015,
      -0.109676, -0.0892921, -0.0842611, -0.242326, 0.267806, -0.278374,
      0.409082, -0.0548848, 0.711558, 0.261525, 0.000315534, 0.0010572,
      -0.0194422, 0.0355201, 0.035778, 0.0611836, -0.152489, 0.0447677,
      0.0892921, 0.0842611, 0.110764, 0.343764, 0.278374, -0.409082, 0.588785,
      0.403311, -0.261525, -0.000315534, -0.823783, -9.8891e-16, -3.34692e-15,
      0.103497, -0.277613, -5.51463e-16, 4.95594e-17, 0.163544, 0.121215,
      -7.23985e-17, -2.63149e-16, -0.259891, -0.284396, -1.74149e-16,
      -6.65818e-16, 0.208987, 0.00782842, -0.0333718, 0.22696, 0.373203,
      -0.337332, -0.251625, -0.144131, 0.594004, -0.329076, -0.0456626, 0.18588,
      0.0399869, -0.0631275, -0.0704844, -0.231899, 0.111054, -0.189161,
      0.000129868, 0.0333718, 0.436683, -0.009952, 0.337332, 0.251625, 0.442357,
      0.421824, 0.329076, 0.0456626, 0.12757, -0.140984, 0.0631275, 0.0704844,
      -0.0197737, 0.256357, 0.189161, -0.000129868, -0.0333718, 0.209723,
      -0.383155, -0.337332, -0.251625, 0.586489, -0.172181, -0.329076,
      -0.0456626, -0.0583106, -0.180971, -0.0631275, -0.0704844, 0.212125,
      0.145303, -0.189161, 0.000129868, -0.00177478, 0.0553645, -0.00126176,
      -0.0164247, 0.23154, -0.262519, -0.250334, -0.0135392, -0.429472, 0.45567,
      -0.503583, -0.223493, -0.211802, -0.020461, 0.265268, 0.0023362,
      -0.00241145, 0.294363, -0.686239, 0.0156394, 0.204055, -0.360136,
      0.267096, 0.254698, 0.074687, -0.0228668, 0.132236, -0.14614, -0.174986,
      -0.185046, -0.0109958, 0.142556, 0.0661743, 0.0022999, -0.00177478,
      -0.0265895, 0.0485779, -0.0164247, 0.23154, 0.348055, -0.102182,
      -0.0135392, -0.429472, 0.208281, 0.646413, -0.223493, -0.211802,
      -0.219498, -0.150354, 0.0023362, -0.00241145, 0.294363, 0.329576,
      -0.60212, 0.204055, -0.360136, -0.354123, 0.103963, 0.074687, -0.0228668,
      0.0604434, 0.18759, -0.174986, -0.185046, -0.117959, -0.0808008,
      0.0661743, 0.0022999, -0.00177478, -0.028775, -0.0473162, -0.0164247,
      0.23154, -0.0855356, 0.352515, -0.0135392, -0.429472, -0.663951, -0.14283,
      -0.223493, -0.211802, 0.239959, -0.114914, 0.0023362, -0.00241145,
      0.294363, 0.356664, 0.586481, 0.204055, -0.360136, 0.0870267, -0.358661,
      0.074687, -0.0228668, -0.192679, -0.0414494, -0.174986, -0.185046,
      0.128955, -0.0617554, 0.0661743, 0.0022999, 0.00741062, -3.87173e-16,
      -4.31863e-16, 0.0468488, -0.0476991, 7.27357e-16, 1.23654e-15, -0.43422,
      -0.159247, -4.34945e-17, 1.2743e-16, 0.503528, -0.228856, -7.97629e-17,
      -2.53026e-16, 0.689669, -0.00301027, 0.173046, 7.91486e-15, 8.39419e-15,
      -0.717804, -0.0195249, -1.10754e-15, -1.66789e-15, 0.551371, 0.0684292,
      4.15572e-17, -1.84233e-16, 0.0105378, -0.148396, -1.63792e-16,
      -4.6499e-16, 0.351571, 0.00210309;

  TCMatrix_gwbse Mmn;
  Mmn.Initialize(aobasis.AOBasisSize(), 0, 16, 0, 16);
  Mmn.Fill(aobasis, aobasis, MOs);

  votca::ctp::Logger log;
  RPA rpa(log, Mmn);
  rpa.setRPAInputEnergies(mo_energy);
  rpa.configure(4, 0, 16);

  Sigma_Spectral sigma = Sigma_Spectral(Mmn, rpa);
  Sigma_Spectral::options opt;
  opt.homo = 4;
  opt.qpmin = 0;
  opt.qpmax = 16;
  opt.rpamin = 0;
  opt.rpamax = 16;
  sigma.configure(opt);

  Eigen::MatrixXd x = sigma.CalcExchange();

  Eigen::MatrixXd x_ref = Eigen::MatrixXd::Zero(17, 17);
  x_ref << -0.00370412, -1.59566e-08, -6.75073e-09, -0.000684112, 0.0188911,
      -4.4624e-09, 1.22949e-08, -0.000795391, 0.00504307, 1.72119e-09,
      -9.19106e-09, 0.0140303, 0.01811, -2.89711e-09, 3.40918e-09, -0.00266758,
      2.00221e-05, -1.59566e-08, -0.00682224, -1.70145e-09, 2.72016e-09,
      1.6257e-07, 0.00561074, 0.00559988, 3.98481e-09, 2.85634e-08, 0.00746612,
      -0.00788248, 1.34435e-07, 1.84461e-07, -0.00064411, 0.0064346,
      -2.38641e-08, -1.82782e-09, -6.75073e-09, -1.70145e-09, -0.00682222,
      7.21988e-10, 6.40818e-08, -0.00559984, 0.00561072, 1.36378e-09,
      1.16052e-08, 0.00788246, 0.00746608, 5.28253e-08, 7.22461e-08,
      -0.00643455, -0.000644091, -9.27453e-09, -7.38479e-10, -0.000684112,
      2.72016e-09, 7.21988e-10, -0.00595334, -0.00819783, 6.55678e-09,
      -4.38787e-09, -0.0026928, 0.000460416, -8.03933e-10, 4.27309e-09,
      -0.00228116, -0.0103568, -2.40859e-09, 1.68126e-09, -0.00102159,
      -0.000111773, 0.0188911, 1.6257e-07, 6.40818e-08, -0.00819783, -0.209862,
      8.00987e-08, -1.22485e-07, -0.0159641, -0.0364151, -1.40586e-08,
      1.05127e-07, -0.154293, -0.21813, 5.43914e-09, -5.48907e-09, 0.00986884,
      5.90199e-05, -4.4624e-09, 0.00561074, -0.00559984, 6.55678e-09,
      8.00987e-08, -0.0291401, -5.4019e-09, 8.80569e-09, 1.14844e-08,
      0.000642242, 0.024554, 5.87742e-08, 8.70793e-08, -0.0162291, -0.0198789,
      -2.58402e-09, 4.9345e-10, 1.22949e-08, 0.00559988, 0.00561072,
      -4.38787e-09, -1.22485e-07, -5.4019e-09, -0.0291401, -1.60476e-08,
      -2.48907e-08, -0.024554, 0.000642261, -9.04449e-08, -1.27343e-07,
      0.0198789, -0.0162291, -2.8592e-09, 4.71519e-10, -0.000795391,
      3.98481e-09, 1.36378e-09, -0.0026928, -0.0159641, 8.80569e-09,
      -1.60476e-08, -0.0115818, -0.00171152, -2.83121e-09, 7.39872e-09,
      -0.00921298, -0.0142798, -2.05408e-09, -4.97901e-09, -0.0100267,
      -9.13292e-05, 0.00504307, 2.85634e-08, 1.16052e-08, 0.000460416,
      -0.0364151, 1.14844e-08, -2.48907e-08, -0.00171152, -0.0090557,
      -4.06853e-09, 1.74842e-08, -0.0276487, -0.0363408, 4.8481e-09,
      -6.02765e-09, 0.0021409, -2.62996e-05, 1.72119e-09, 0.00746612,
      0.00788246, -8.03933e-10, -1.40586e-08, 0.000642242, -0.024554,
      -2.83121e-09, -4.06853e-09, -0.0261176, 9.98743e-09, -2.24351e-08,
      -2.98729e-08, 0.0176435, -0.0136511, 5.75818e-09, 1.88005e-09,
      -9.19106e-09, -0.00788248, 0.00746608, 4.27309e-09, 1.05127e-07, 0.024554,
      0.000642261, 7.39872e-09, 1.74842e-08, 9.98743e-09, -0.0261176,
      8.24848e-08, 1.17485e-07, 0.0136511, 0.0176435, -8.51658e-09,
      -8.53563e-10, 0.0140303, 1.34435e-07, 5.28253e-08, -0.00228116, -0.154293,
      5.87742e-08, -9.04449e-08, -0.00921298, -0.0276487, -2.24351e-08,
      8.24848e-08, -0.117991, -0.162036, 6.73442e-09, -6.66614e-10, 0.0100442,
      0.000214376, 0.01811, 1.84461e-07, 7.22461e-08, -0.0103568, -0.21813,
      8.70793e-08, -1.27343e-07, -0.0142798, -0.0363408, -2.98729e-08,
      1.17485e-07, -0.162036, -0.234311, 6.81854e-09, -4.59511e-11, 0.0131863,
      -9.13286e-05, -2.89711e-09, -0.00064411, -0.00643455, -2.40859e-09,
      5.43914e-09, -0.0162291, 0.0198789, -2.05408e-09, 4.8481e-09, 0.0176435,
      0.0136511, 6.73442e-09, 6.81854e-09, -0.0242219, 6.69066e-09, -1.5142e-09,
      -5.43482e-10, 3.40918e-09, 0.0064346, -0.000644091, 1.68126e-09,
      -5.48907e-09, -0.0198789, -0.0162291, -4.97901e-09, -6.02765e-09,
      -0.0136511, 0.0176435, -6.66614e-10, -4.59511e-11, 6.69066e-09,
      -0.0242219, -9.38585e-09, 1.1836e-09, -0.00266758, -2.38641e-08,
      -9.27453e-09, -0.00102159, 0.00986884, -2.58402e-09, -2.8592e-09,
      -0.0100267, 0.0021409, 5.75818e-09, -8.51658e-09, 0.0100442, 0.0131863,
      -1.5142e-09, -9.38585e-09, -0.0129496, -0.000241474, 2.00221e-05,
      -1.82782e-09, -7.38479e-10, -0.000111773, 5.90199e-05, 4.9345e-10,
      4.71519e-10, -9.13292e-05, -2.62996e-05, 1.88005e-09, -8.53563e-10,
      0.000214376, -9.13286e-05, -5.43482e-10, 1.1836e-09, -0.000241474,
      -0.000593496;

  bool check_x = x_ref.isApprox(x, 1e-5);
  if (!check_x) {
    cout << "Sigma X" << endl;
    cout << x << endl;
    cout << "Sigma X ref" << endl;
    cout << x_ref << endl;
  }
  BOOST_CHECK_EQUAL(check_x, true);

  sigma.PrepareScreening();
  sigma.set_COHSEX(false);

  Eigen::VectorXd c_diag = sigma.CalcCorrelationDiag(mo_energy);
  Eigen::MatrixXd c_off = sigma.CalcCorrelationOffDiag(mo_energy);

  c_off.diagonal() = c_diag;
  Eigen::MatrixXd c_ref = Eigen::MatrixXd::Zero(17, 17);
  c_ref << -0.000237895, 2.7743e-09, 1.19797e-09, -0.000459022, -0.00145463,
      -2.79844e-09, 1.07531e-08, 0.000324251, 0.00337546, 1.47057e-08,
      8.50489e-09, 0.00177552, 0.00379921, -1.69108e-08, -4.96026e-09,
      0.00776139, 0.000495213, 2.7743e-09, 0.000178373, 2.77758e-09,
      -2.22562e-09, 1.27113e-08, 0.00110344, 0.00110132, -3.50647e-09,
      1.26787e-08, 0.0134784, -0.01423, 1.5e-07, 2.70761e-07, -0.00214693,
      0.0214471, 2.59854e-07, -5.58365e-09, 1.19797e-09, 2.77758e-09,
      0.000178381, 1.45284e-09, -1.17825e-08, -0.00110128, 0.00110344,
      6.68223e-09, 1.92979e-08, 0.01423, 0.0134782, 6.7486e-08, 1.12453e-07,
      -0.0214469, -0.00214676, 1.13967e-07, -2.91113e-09, -0.000459022,
      -2.22562e-09, 1.45284e-09, 0.000150105, 0.00414127, -1.08574e-09,
      1.38622e-08, 0.000148616, 0.00188563, 5.06983e-09, 1.75491e-09,
      0.00101752, -0.00118692, -4.36024e-08, -6.74721e-10, -0.00502915,
      -3.95871e-05, -0.00145463, 1.27113e-08, -1.17825e-08, 0.00414127,
      -0.00777857, -1.88591e-08, -1.64433e-08, 0.000801982, -0.00869841,
      -2.86656e-08, 4.24888e-08, -0.109936, -0.18341, 8.721e-08, -2.37426e-08,
      -0.209338, 0.00205394, -2.79844e-09, 0.00110344, -0.00110128,
      -1.08574e-09, -1.88591e-08, -0.0317638, -5.62616e-09, 4.41694e-09,
      3.5956e-08, 0.00188396, 0.0720271, 1.71627e-07, 2.35944e-07, -0.0533258,
      -0.0653184, 1.3388e-07, 1.67277e-09, 1.07531e-08, 0.00110132, 0.00110344,
      1.38622e-08, -1.64433e-08, -5.62616e-09, -0.0317638, 4.49344e-08,
      -9.45269e-08, -0.0720272, 0.001884, -2.46617e-07, -5.00049e-07, 0.0653184,
      -0.0533259, 1.98858e-08, -2.30416e-09, 0.000324251, -3.50647e-09,
      6.68223e-09, 0.000148616, 0.000801982, 4.41694e-09, 4.49344e-08,
      -0.0103849, -0.000948934, -1.68089e-08, -8.7923e-09, -0.0211094,
      0.00444894, -1.20251e-07, -3.02026e-09, -0.0374504, 7.22706e-05,
      0.00337546, 1.26787e-08, 1.92979e-08, 0.00188563, -0.00869841, 3.5956e-08,
      -9.45269e-08, -0.000948934, -0.0632503, -2.81777e-07, -1.66923e-07,
      -0.0261141, -0.0203828, 1.56001e-07, 8.63377e-08, -0.0410374, -0.010426,
      1.47057e-08, 0.0134784, 0.01423, 5.06983e-09, -2.86656e-08, 0.00188396,
      -0.0720272, -1.68089e-08, -2.81777e-07, -0.269165, -1.0492e-07,
      -3.91051e-07, -6.6255e-07, 0.26505, -0.205074, 2.77972e-07, -8.50318e-09,
      8.50489e-09, -0.01423, 0.0134782, 1.75491e-09, 4.24888e-08, 0.0720271,
      0.001884, -8.7923e-09, -1.66923e-07, -1.0492e-07, -0.269163, -9.27438e-08,
      -2.2333e-08, 0.205073, 0.265049, 2.32135e-07, -1.23042e-08, 0.00177552,
      1.5e-07, 6.7486e-08, 0.00101752, -0.109936, 1.71627e-07, -2.46617e-07,
      -0.0211094, -0.0261141, -3.91051e-07, -9.27438e-08, -0.37438, -0.559885,
      9.58161e-07, -7.97292e-08, -0.437045, 0.021609, 0.00379921, 2.70761e-07,
      1.12453e-07, -0.00118692, -0.18341, 2.35944e-07, -5.00049e-07, 0.00444894,
      -0.0203828, -6.6255e-07, -2.2333e-08, -0.559885, -0.934999, 1.29668e-06,
      -1.86385e-07, -0.584953, 0.0349636, -1.69108e-08, -0.00214693, -0.0214469,
      -4.36024e-08, 8.721e-08, -0.0533258, 0.0653184, -1.20251e-07, 1.56001e-07,
      0.26505, 0.205073, 9.58161e-07, 1.29668e-06, -0.463949, 7.67222e-07,
      -8.78618e-07, -8.94279e-09, -4.96026e-09, 0.0214471, -0.00214676,
      -6.74721e-10, -2.37426e-08, -0.0653184, -0.0533259, -3.02026e-09,
      8.63377e-08, -0.205074, 0.265049, -7.97292e-08, -1.86385e-07, 7.67222e-07,
      -0.463949, 2.78246e-07, 2.21473e-08, 0.00776139, 2.59854e-07, 1.13967e-07,
      -0.00502915, -0.209338, 1.3388e-07, 1.98858e-08, -0.0374504, -0.0410374,
      2.77972e-07, 2.32135e-07, -0.437045, -0.584953, -8.78618e-07, 2.78246e-07,
      -0.00266837, 0.0391511, 0.000495213, -5.58365e-09, -2.91113e-09,
      -3.95871e-05, 0.00205394, 1.67277e-09, -2.30416e-09, 7.22706e-05,
      -0.010426, -8.50318e-09, -1.23042e-08, 0.021609, 0.0349636, -8.94279e-09,
      2.21473e-08, 0.0391511, -0.0892882;

  bool check_c_diag = c_diag.isApprox(c_ref.diagonal(), 1e-5);
  if (!check_c_diag) {
    cout << "Sigma C" << endl;
    cout << c_diag << endl;
    cout << "Sigma C ref" << endl;
    cout << c_ref.diagonal() << endl;
  }
  BOOST_CHECK_EQUAL(check_c_diag, true);

  bool check_c = c_ref.isApprox(c_off, 1e-5);
  if (!check_c) {
    cout << "Sigma C" << endl;
    cout << c_off << endl;
    cout << "Sigma C ref" << endl;
    cout << c_ref << endl;
  }
  BOOST_CHECK_EQUAL(check_c, true);

  sigma.set_COHSEX(true);

  Eigen::VectorXd c_diag_Hedin = sigma.CalcCorrelationDiag(mo_energy);
  Eigen::MatrixXd c_off_Hedin = sigma.CalcCorrelationOffDiag(mo_energy);

  c_off_Hedin.diagonal() = c_diag_Hedin;
  Eigen::MatrixXd c_ref_Hedin = Eigen::MatrixXd::Zero(17, 17);
  c_ref_Hedin << -0.00800674, -5.22656e-08, -3.63484e-08, -0.00719671,
      0.0461212, -6.7629e-08, 1.67645e-07, -0.0234664, 0.0400903, 1.63116e-07,
      9.47912e-08, 0.0831774, 0.0974307, -2.57113e-07, 4.4082e-08, -0.0398873,
      0.00294455, -5.22656e-08, -0.0250697, -5.8732e-08, -4.51752e-08,
      5.44296e-07, 0.0175481, 0.0175144, -1.69265e-07, 2.36316e-07, 0.0907382,
      -0.0957978, 1.18357e-06, 1.50654e-06, -0.0104355, 0.104245, -5.32771e-07,
      -6.25712e-08, -3.63484e-08, -5.8732e-08, -0.0250696, -2.173e-08,
      3.74632e-07, -0.0175139, 0.0175481, -4.78466e-08, 2.18409e-07, 0.095798,
      0.0907371, 7.4287e-07, 9.728e-07, -0.104244, -0.0104343, -1.70314e-07,
      -2.92769e-08, -0.00719671, -4.51752e-08, -2.173e-08, -0.00942721,
      0.0392896, -2.6937e-08, 1.33864e-07, -0.0294491, 0.0306041, 5.19445e-08,
      4.27199e-08, 0.0844174, 0.079431, -1.96826e-07, 5.47895e-08, -0.0565366,
      0.000694586, 0.0461212, 5.44296e-07, 3.74632e-07, 0.0392896, -0.42867,
      9.22346e-07, -1.70892e-06, 0.136081, -0.18848, -1.74082e-06, -9.29874e-07,
      -0.849286, -1.09312, 3.57487e-06, -3.42818e-07, 0.354156, 0.0298329,
      -6.7629e-08, 0.0175481, -0.0175139, -2.6937e-08, 9.22346e-07, -0.289425,
      -2.25693e-07, -1.75928e-07, 2.89129e-07, 0.010684, 0.408474, 1.90172e-06,
      2.68276e-06, -0.409036, -0.501025, -6.74607e-07, -1.05677e-07,
      1.67645e-07, 0.0175144, 0.0175481, 1.33864e-07, -1.70892e-06,
      -2.25693e-07, -0.289425, 6.49871e-07, -6.73079e-07, -0.408475, 0.0106846,
      -3.7485e-06, -4.64704e-06, 0.501024, -0.409036, 2.08991e-06, 1.84161e-07,
      -0.0234664, -1.69265e-07, -4.78466e-08, -0.0294491, 0.136081,
      -1.75928e-07, 6.49871e-07, -0.150285, 0.0573283, 2.35694e-07, 1.724e-07,
      0.295679, 0.311793, -1.0645e-06, 2.56544e-07, -0.336652, -0.00416185,
      0.0400903, 2.36316e-07, 2.18409e-07, 0.0306041, -0.18848, 2.89129e-07,
      -6.73079e-07, 0.0573283, -0.340135, -1.11164e-06, -7.45135e-07, -0.384761,
      -0.439229, 9.84563e-07, -8.74891e-08, 0.0483461, -0.0492558, 1.63116e-07,
      0.0907382, 0.095798, 5.19445e-08, -1.74082e-06, 0.010684, -0.408475,
      2.35694e-07, -1.11164e-06, -1.15635, 2.02027e-07, -3.54596e-06,
      -4.69399e-06, 0.977934, -0.756648, 1.08398e-06, 1.10768e-07, 9.47912e-08,
      -0.0957978, 0.0907371, 4.27199e-08, -9.29874e-07, 0.408474, 0.0106846,
      1.724e-07, -7.45135e-07, 2.02027e-07, -1.15634, -2.04815e-06,
      -2.61312e-06, 0.756644, 0.977932, 7.04441e-07, 2.62652e-08, 0.0831774,
      1.18357e-06, 7.4287e-07, 0.0844174, -0.849286, 1.90172e-06, -3.7485e-06,
      0.295679, -0.384761, -3.54596e-06, -2.04815e-06, -1.96638, -2.39183,
      8.29801e-06, -8.49307e-07, 0.937495, 0.108252, 0.0974307, 1.50654e-06,
      9.728e-07, 0.079431, -1.09312, 2.68276e-06, -4.64704e-06, 0.311793,
      -0.439229, -4.69399e-06, -2.61312e-06, -2.39183, -3.17297, 1.05233e-05,
      -6.79008e-07, 1.01444, 0.140041, -2.57113e-07, -0.0104355, -0.104244,
      -1.96826e-07, 3.57487e-06, -0.409036, 0.501024, -1.0645e-06, 9.84563e-07,
      0.977934, 0.756644, 8.29801e-06, 1.05233e-05, -1.87042, 1.75397e-06,
      -4.34804e-06, -5.44844e-07, 4.4082e-08, 0.104245, -0.0104343, 5.47895e-08,
      -3.42818e-07, -0.501025, -0.409036, 2.56544e-07, -8.74891e-08, -0.756648,
      0.977932, -8.49307e-07, -6.79008e-07, 1.75397e-06, -1.87042, 9.00661e-07,
      6.70723e-08, -0.0398873, -5.32771e-07, -1.70314e-07, -0.0565366, 0.354156,
      -6.74607e-07, 2.08991e-06, -0.336652, 0.0483461, 1.08398e-06, 7.04441e-07,
      0.937495, 1.01444, -4.34804e-06, 9.00661e-07, -1.06834, -0.0737331,
      0.00294455, -6.25712e-08, -2.92769e-08, 0.000694586, 0.0298329,
      -1.05677e-07, 1.84161e-07, -0.00416185, -0.0492558, 1.10768e-07,
      2.62652e-08, 0.108252, 0.140041, -5.44844e-07, 6.70723e-08, -0.0737331,
      -0.193178;

  bool check_c_diag_Hedin = c_diag_Hedin.isApprox(c_ref_Hedin.diagonal(), 1e-5);
  if (!check_c_diag_Hedin) {
    cout << "Sigma C (Hedin)" << endl;
    cout << c_diag_Hedin << endl;
    cout << "Sigma C ref (Hedin)" << endl;
    cout << c_ref_Hedin.diagonal() << endl;
  }
  BOOST_CHECK_EQUAL(check_c_diag_Hedin, true);

  bool check_c_Hedin = c_ref_Hedin.isApprox(c_off_Hedin, 1e-5);
  if (!check_c_Hedin) {
    cout << "Sigma C (Hedin)" << endl;
    cout << c_off_Hedin << endl;
    cout << "Sigma C ref (Hedin)" << endl;
    cout << c_ref_Hedin << endl;
  }
  BOOST_CHECK_EQUAL(check_c_Hedin, true);
}

BOOST_AUTO_TEST_SUITE_END()
