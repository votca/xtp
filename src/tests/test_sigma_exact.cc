/*
 * Copyright 2009-2018 The VOTCA Development Team (http://www.votca.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
#define BOOST_TEST_MAIN

#define BOOST_TEST_MODULE sigma_test
#include <boost/test/unit_test.hpp>
#include <fstream>
#include <votca/xtp/aobasis.h>
#include <votca/xtp/orbitals.h>
#include <votca/xtp/rpa.h>
#include <votca/xtp/sigma_spectral.h>
#include <votca/xtp/threecenter.h>

using namespace votca::xtp;
using namespace std;

BOOST_AUTO_TEST_SUITE(sigma_test)

BOOST_AUTO_TEST_CASE(sigma_full) {

  ofstream xyzfile("molecule.xyz");
  xyzfile << " 5" << endl;
  xyzfile << " methane" << endl;
  xyzfile << " C            .000000     .000000     .000000" << endl;
  xyzfile << " H            .629118     .629118     .629118" << endl;
  xyzfile << " H           -.629118    -.629118     .629118" << endl;
  xyzfile << " H            .629118    -.629118    -.629118" << endl;
  xyzfile << " H           -.629118     .629118    -.629118" << endl;
  xyzfile.close();

  ofstream basisfile("3-21G.xml");
  basisfile << "<basis name=\"3-21G\">" << endl;
  basisfile << "  <element name=\"H\">" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"5.447178e+00\">" << endl;
  basisfile << "        <contractions factor=\"1.562850e-01\" type=\"S\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"8.245470e-01\">" << endl;
  basisfile << "        <contractions factor=\"9.046910e-01\" type=\"S\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"1.831920e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"S\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "  </element>" << endl;
  basisfile << "  <element name=\"C\">" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"S\">" << endl;
  basisfile << "      <constant decay=\"1.722560e+02\">" << endl;
  basisfile << "        <contractions factor=\"6.176690e-02\" type=\"S\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"2.591090e+01\">" << endl;
  basisfile << "        <contractions factor=\"3.587940e-01\" type=\"S\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"5.533350e+00\">" << endl;
  basisfile << "        <contractions factor=\"7.007130e-01\" type=\"S\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"SP\">" << endl;
  basisfile << "      <constant decay=\"3.664980e+00\">" << endl;
  basisfile << "        <contractions factor=\"-3.958970e-01\" type=\"S\"/>"
            << endl;
  basisfile << "        <contractions factor=\"2.364600e-01\" type=\"P\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "      <constant decay=\"7.705450e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.215840e+00\" type=\"S\"/>"
            << endl;
  basisfile << "        <contractions factor=\"8.606190e-01\" type=\"P\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "    <shell scale=\"1.0\" type=\"SP\">" << endl;
  basisfile << "      <constant decay=\"1.958570e-01\">" << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"S\"/>"
            << endl;
  basisfile << "        <contractions factor=\"1.000000e+00\" type=\"P\"/>"
            << endl;
  basisfile << "      </constant>" << endl;
  basisfile << "    </shell>" << endl;
  basisfile << "  </element>" << endl;
  basisfile << "</basis>" << endl;
  basisfile.close();

  Orbitals orbitals;
  orbitals.LoadFromXYZ("molecule.xyz");
  BasisSet basis;
  basis.LoadBasisSet("3-21G.xml");

  AOBasis aobasis;
  aobasis.AOBasisFill(basis, orbitals.QMAtoms());

  Eigen::VectorXd mo_energy = Eigen::VectorXd::Zero(17);
  mo_energy << 0.0468207, 0.0907801, 0.0907801, 0.104563, 0.592491, 0.663355,
      0.663355, 0.768373, 1.69292, 1.97724, 1.97724, 2.50877, 2.98732, 3.4418,
      3.4418, 4.81084, 17.1838;

  Eigen::MatrixXd MOs = Eigen::MatrixXd::Zero(17, 17);
  MOs << 0.0185815, 2.9133e-17, 8.49354e-17, -0.00312916, 0.0420075,
      1.11356e-16, 1.85886e-17, -0.0334732, 0.0485113, -8.71556e-18,
      -3.79994e-17, -0.0346485, -0.0248392, -3.32286e-22, -4.62643e-17,
      0.0144472, 0.996183, 0.166534, 2.80578e-16, 7.85515e-16, -0.0299557,
      0.409156, 1.10045e-15, 1.67666e-16, -0.336895, 0.608646, -1.00343e-16,
      -5.04622e-16, -0.437568, -0.299751, -2.77682e-17, -6.06812e-16, 0.176594,
      -0.0866677, 0.0010572, -0.0210402, -0.0345975, 0.035778, 0.0611836,
      0.0374747, -0.154443, 0.0892921, 0.0842611, -0.35309, -0.0759572,
      0.278374, -0.409082, -0.64367, 0.308248, -0.261525, -0.000315534,
      -0.0010572, -0.0404824, 0.000922593, -0.035778, -0.0611836, -0.115015,
      -0.109676, -0.0892921, -0.0842611, -0.242326, 0.267806, -0.278374,
      0.409082, -0.0548848, 0.711558, 0.261525, 0.000315534, 0.0010572,
      -0.0194422, 0.0355201, 0.035778, 0.0611836, -0.152489, 0.0447677,
      0.0892921, 0.0842611, 0.110764, 0.343764, 0.278374, -0.409082, 0.588785,
      0.403311, -0.261525, -0.000315534, -0.823783, -9.8891e-16, -3.34692e-15,
      0.103497, -0.277613, -5.51463e-16, 4.95594e-17, 0.163544, 0.121215,
      -7.23985e-17, -2.63149e-16, -0.259891, -0.284396, -1.74149e-16,
      -6.65818e-16, 0.208987, 0.00782842, -0.0333718, 0.22696, 0.373203,
      -0.337332, -0.251625, -0.144131, 0.594004, -0.329076, -0.0456626, 0.18588,
      0.0399869, -0.0631275, -0.0704844, -0.231899, 0.111054, -0.189161,
      0.000129868, 0.0333718, 0.436683, -0.009952, 0.337332, 0.251625, 0.442357,
      0.421824, 0.329076, 0.0456626, 0.12757, -0.140984, 0.0631275, 0.0704844,
      -0.0197737, 0.256357, 0.189161, -0.000129868, -0.0333718, 0.209723,
      -0.383155, -0.337332, -0.251625, 0.586489, -0.172181, -0.329076,
      -0.0456626, -0.0583106, -0.180971, -0.0631275, -0.0704844, 0.212125,
      0.145303, -0.189161, 0.000129868, -0.00177478, 0.0553645, -0.00126176,
      -0.0164247, 0.23154, -0.262519, -0.250334, -0.0135392, -0.429472, 0.45567,
      -0.503583, -0.223493, -0.211802, -0.020461, 0.265268, 0.0023362,
      -0.00241145, 0.294363, -0.686239, 0.0156394, 0.204055, -0.360136,
      0.267096, 0.254698, 0.074687, -0.0228668, 0.132236, -0.14614, -0.174986,
      -0.185046, -0.0109958, 0.142556, 0.0661743, 0.0022999, -0.00177478,
      -0.0265895, 0.0485779, -0.0164247, 0.23154, 0.348055, -0.102182,
      -0.0135392, -0.429472, 0.208281, 0.646413, -0.223493, -0.211802,
      -0.219498, -0.150354, 0.0023362, -0.00241145, 0.294363, 0.329576,
      -0.60212, 0.204055, -0.360136, -0.354123, 0.103963, 0.074687, -0.0228668,
      0.0604434, 0.18759, -0.174986, -0.185046, -0.117959, -0.0808008,
      0.0661743, 0.0022999, -0.00177478, -0.028775, -0.0473162, -0.0164247,
      0.23154, -0.0855356, 0.352515, -0.0135392, -0.429472, -0.663951, -0.14283,
      -0.223493, -0.211802, 0.239959, -0.114914, 0.0023362, -0.00241145,
      0.294363, 0.356664, 0.586481, 0.204055, -0.360136, 0.0870267, -0.358661,
      0.074687, -0.0228668, -0.192679, -0.0414494, -0.174986, -0.185046,
      0.128955, -0.0617554, 0.0661743, 0.0022999, 0.00741062, -3.87173e-16,
      -4.31863e-16, 0.0468488, -0.0476991, 7.27357e-16, 1.23654e-15, -0.43422,
      -0.159247, -4.34945e-17, 1.2743e-16, 0.503528, -0.228856, -7.97629e-17,
      -2.53026e-16, 0.689669, -0.00301027, 0.173046, 7.91486e-15, 8.39419e-15,
      -0.717804, -0.0195249, -1.10754e-15, -1.66789e-15, 0.551371, 0.0684292,
      4.15572e-17, -1.84233e-16, 0.0105378, -0.148396, -1.63792e-16,
      -4.6499e-16, 0.351571, 0.00210309;

  TCMatrix_gwbse Mmn;
  Mmn.Initialize(aobasis.AOBasisSize(), 0, 16, 0, 16);
  Mmn.Fill(aobasis, aobasis, MOs);

  votca::ctp::Logger log;
  RPA rpa(log, Mmn);
  rpa.setRPAInputEnergies(mo_energy);
  rpa.configure(4, 0, 16);

  Sigma_Spectral sigma = Sigma_Spectral(Mmn, rpa);
  Sigma_Spectral::options opt;
  opt.homo = 4;
  opt.qpmin = 0;
  opt.qpmax = 16;
  opt.rpamin = 0;
  opt.rpamax = 16;
  sigma.configure(opt);

  Eigen::MatrixXd x = sigma.CalcExchange();

  Eigen::MatrixXd x_ref = Eigen::MatrixXd::Zero(17, 17);
  x_ref <<
      -0.00370412, -1.59566e-08, -6.75073e-09, -0.000684112, 0.0188911,
      -4.4624e-09, 1.22949e-08, -0.000795391, 0.00504307, 1.72119e-09,
      -9.19106e-09, 0.0140303, 0.01811, -2.89711e-09, 3.40918e-09, -0.00266758,
      2.00221e-05, -1.59566e-08, -0.00682224, -1.70145e-09, 2.72016e-09,
      1.6257e-07, 0.00561074, 0.00559988, 3.98481e-09, 2.85634e-08, 0.00746612,
      -0.00788248, 1.34435e-07, 1.84461e-07, -0.00064411, 0.0064346,
      -2.38641e-08, -1.82782e-09, -6.75073e-09, -1.70145e-09, -0.00682222,
      7.21988e-10, 6.40818e-08, -0.00559984, 0.00561072, 1.36378e-09,
      1.16052e-08, 0.00788246, 0.00746608, 5.28253e-08, 7.22461e-08,
      -0.00643455, -0.000644091, -9.27453e-09, -7.38479e-10, -0.000684112,
      2.72016e-09, 7.21988e-10, -0.00595334, -0.00819783, 6.55678e-09,
      -4.38787e-09, -0.0026928, 0.000460416, -8.03933e-10, 4.27309e-09,
      -0.00228116, -0.0103568, -2.40859e-09, 1.68126e-09, -0.00102159,
      -0.000111773, 0.0188911, 1.6257e-07, 6.40818e-08, -0.00819783, -0.209862,
      8.00987e-08, -1.22485e-07, -0.0159641, -0.0364151, -1.40586e-08,
      1.05127e-07, -0.154293, -0.21813, 5.43914e-09, -5.48907e-09, 0.00986884,
      5.90199e-05, -4.4624e-09, 0.00561074, -0.00559984, 6.55678e-09,
      8.00987e-08, -0.0291401, -5.4019e-09, 8.80569e-09, 1.14844e-08,
      0.000642242, 0.024554, 5.87742e-08, 8.70793e-08, -0.0162291, -0.0198789,
      -2.58402e-09, 4.9345e-10, 1.22949e-08, 0.00559988, 0.00561072,
      -4.38787e-09, -1.22485e-07, -5.4019e-09, -0.0291401, -1.60476e-08,
      -2.48907e-08, -0.024554, 0.000642261, -9.04449e-08, -1.27343e-07,
      0.0198789, -0.0162291, -2.8592e-09, 4.71519e-10, -0.000795391,
      3.98481e-09, 1.36378e-09, -0.0026928, -0.0159641, 8.80569e-09,
      -1.60476e-08, -0.0115818, -0.00171152, -2.83121e-09, 7.39872e-09,
      -0.00921298, -0.0142798, -2.05408e-09, -4.97901e-09, -0.0100267,
      -9.13292e-05, 0.00504307, 2.85634e-08, 1.16052e-08, 0.000460416,
      -0.0364151, 1.14844e-08, -2.48907e-08, -0.00171152, -0.0090557,
      -4.06853e-09, 1.74842e-08, -0.0276487, -0.0363408, 4.8481e-09,
      -6.02765e-09, 0.0021409, -2.62996e-05, 1.72119e-09, 0.00746612,
      0.00788246, -8.03933e-10, -1.40586e-08, 0.000642242, -0.024554,
      -2.83121e-09, -4.06853e-09, -0.0261176, 9.98743e-09, -2.24351e-08,
      -2.98729e-08, 0.0176435, -0.0136511, 5.75818e-09, 1.88005e-09,
      -9.19106e-09, -0.00788248, 0.00746608, 4.27309e-09, 1.05127e-07, 0.024554,
      0.000642261, 7.39872e-09, 1.74842e-08, 9.98743e-09, -0.0261176,
      8.24848e-08, 1.17485e-07, 0.0136511, 0.0176435, -8.51658e-09,
      -8.53563e-10, 0.0140303, 1.34435e-07, 5.28253e-08, -0.00228116, -0.154293,
      5.87742e-08, -9.04449e-08, -0.00921298, -0.0276487, -2.24351e-08,
      8.24848e-08, -0.117991, -0.162036, 6.73442e-09, -6.66614e-10, 0.0100442,
      0.000214376, 0.01811, 1.84461e-07, 7.22461e-08, -0.0103568, -0.21813,
      8.70793e-08, -1.27343e-07, -0.0142798, -0.0363408, -2.98729e-08,
      1.17485e-07, -0.162036, -0.234311, 6.81854e-09, -4.59511e-11, 0.0131863,
      -9.13286e-05, -2.89711e-09, -0.00064411, -0.00643455, -2.40859e-09,
      5.43914e-09, -0.0162291, 0.0198789, -2.05408e-09, 4.8481e-09, 0.0176435,
      0.0136511, 6.73442e-09, 6.81854e-09, -0.0242219, 6.69066e-09, -1.5142e-09,
      -5.43482e-10, 3.40918e-09, 0.0064346, -0.000644091, 1.68126e-09,
      -5.48907e-09, -0.0198789, -0.0162291, -4.97901e-09, -6.02765e-09,
      -0.0136511, 0.0176435, -6.66614e-10, -4.59511e-11, 6.69066e-09,
      -0.0242219, -9.38585e-09, 1.1836e-09, -0.00266758, -2.38641e-08,
      -9.27453e-09, -0.00102159, 0.00986884, -2.58402e-09, -2.8592e-09,
      -0.0100267, 0.0021409, 5.75818e-09, -8.51658e-09, 0.0100442, 0.0131863,
      -1.5142e-09, -9.38585e-09, -0.0129496, -0.000241474, 2.00221e-05,
      -1.82782e-09, -7.38479e-10, -0.000111773, 5.90199e-05, 4.9345e-10,
      4.71519e-10, -9.13292e-05, -2.62996e-05, 1.88005e-09, -8.53563e-10,
      0.000214376, -9.13286e-05, -5.43482e-10, 1.1836e-09, -0.000241474,
      -0.000593496;

  bool check_x = x_ref.isApprox(x, 1e-5);
  if (!check_x) {
    cout << "Sigma X" << endl;
    cout << x << endl;
    cout << "Sigma X ref" << endl;
    cout << x_ref << endl;
  }
  BOOST_CHECK_EQUAL(check_x, true);

  sigma.PrepareScreening();
  sigma.set_COHSEX(false);

  Eigen::VectorXd c_diag = sigma.CalcCorrelationDiag(mo_energy);
  Eigen::MatrixXd c_off = sigma.CalcCorrelationOffDiag(mo_energy);

  c_off.diagonal() = c_diag;
  Eigen::MatrixXd c_ref = Eigen::MatrixXd::Zero(17, 17);
  c_ref <<
      8.84993e-05, 2.88576e-10, 1.94087e-10, -0.000162378, -0.00100094,
      6.58315e-10, 1.33801e-09, -0.000831706, 0.00145831, 2.40605e-10,
      -1.25886e-09, 0.00168139, 0.00231588, -1.30729e-10, 1.73742e-09,
      -0.00213371, 0.000281081, 2.88576e-10, -0.000253285, -7.6055e-10,
      -1.04285e-09, 1.2326e-08, 0.00135408, 0.00135146, -7.10312e-09,
      3.81274e-09, 0.00442097, -0.00466751, 8.52719e-08, 1.35091e-07,
      -0.000605953, 0.00605339, -7.82846e-08, -2.92293e-09, 1.94087e-10,
      -7.6055e-10, -0.00025328, -2.25234e-10, 4.06513e-09, -0.00135144,
      0.00135407, -1.66595e-09, 1.96263e-09, 0.00466748, 0.00442093,
      3.04233e-08, 4.61069e-08, -0.00605332, -0.000605932, -2.9259e-08,
      -1.07868e-09, -0.000162378, -1.04285e-09, -2.25234e-10, 2.57546e-05,
      0.00120644, 2.36361e-09, 7.90956e-10, -0.000826234, 0.000905832,
      -1.33829e-09, -5.89819e-10, 0.0014331, -0.000671237, -3.3148e-09,
      1.27593e-09, -0.00141153, -2.29953e-05, -0.00100094, 1.2326e-08,
      4.06513e-09, 0.00120644, -0.000706696, 1.32339e-08, -2.51485e-08,
      0.00292452, -0.00345752, -4.91394e-09, 2.94035e-08, -0.0545526,
      -0.0907151, -1.88517e-08, -7.57129e-09, 0.043, 0.00123967,
      6.58315e-10, 0.00135408, -0.00135144, 2.36361e-09, 1.32339e-08,
      -0.0208679, -6.21733e-09, 1.93755e-08, 1.19528e-08, 0.000860434,
      0.0328962, 3.89439e-08, 1.01096e-07, -0.0211829, -0.0259468,
      2.18279e-08, -2.37571e-10, 1.33801e-09, 0.00135146, 0.00135407,
      7.90956e-10, -2.51485e-08, -6.21733e-09, -0.0208678, -6.54958e-09,
      -3.28479e-08, -0.0328962, 0.000860471, -1.14024e-07, -1.38926e-07,
      0.0259468, -0.0211829, 7.03973e-08, 9.12756e-10, -0.000831706,
      -7.10312e-09, -1.66595e-09, -0.000826234, 0.00292452, 1.93755e-08,
      -6.54958e-09, -0.0133139, -0.000614651, -1.82157e-08, -7.10764e-09,
      0.00982415, 0.00885529, -1.24694e-08, 1.7874e-09, -0.0278134,
      0.000167872, 0.00145831, 3.81274e-09, 1.96263e-09, 0.000905832,
      -0.00345752, 1.19528e-08, -3.28479e-08, -0.000614651, -0.0296342,
      -2.00974e-08, -2.47014e-10, -0.009452, -0.00877837, 2.397e-09,
      -1.30741e-08, -0.00200756, -0.00530038, 2.40605e-10, 0.00442097,
      0.00466748, -1.33829e-09, -4.91394e-09, 0.000860434, -0.0328962,
      -1.82157e-08, -2.00974e-08, -0.0877499, 1.24622e-08, -7.49271e-09,
      1.27084e-08, 0.0831218, -0.064313, 1.43837e-08, -1.18473e-09,
      -1.25886e-09, -0.00466751, 0.00442093, -5.89819e-10, 2.94035e-08,
      0.0328962, 0.000860471, -7.10764e-09, -2.47014e-10, 1.24622e-08,
      -0.0877499, 9.18117e-08, 1.72165e-07, 0.0643129, 0.0831218,
      -5.6589e-08, -4.1042e-09, 0.00168139, 8.52719e-08, 3.04233e-08,
      0.0014331, -0.0545526, 3.89439e-08, -1.14024e-07, 0.00982415,
      -0.009452, -7.49271e-09, 9.18117e-08, -0.197297, -0.280038,
      1.46271e-09, -2.54823e-08, 0.139225, 0.0107911, 0.00231588,
      1.35091e-07, 4.61069e-08, -0.000671237, -0.0907151, 1.01096e-07,
      -1.38926e-07, 0.00885529, -0.00877837, 1.27084e-08, 1.72165e-07,
      -0.280038, -0.455233, -4.85173e-08, 1.67584e-08, 0.1665,
      0.0162154, -1.30729e-10, -0.000605953, -0.00605332, -3.3148e-09,
      -1.88517e-08, -0.0211829, 0.0259468, -1.24694e-08, 2.397e-09,
      0.0831218, 0.0643129, 1.46271e-09, -4.85173e-08, -0.185031,
      3.3865e-08, -9.17282e-08, 1.59007e-09, 1.73742e-09, 0.00605339,
      -0.000605932, 1.27593e-09, -7.57129e-09, -0.0259468, -0.0211829,
      1.7874e-09, -1.30741e-08, -0.064313, 0.0831218, -2.54823e-08,
      1.67584e-08, 3.3865e-08, -0.185031, 7.04247e-08, -3.98742e-10,
      -0.00213371, -7.82846e-08, -2.9259e-08, -0.00141153, 0.043,
      2.18279e-08, 7.03973e-08, -0.0278134, -0.00200756, 1.43837e-08,
      -5.6589e-08, 0.139225, 0.1665, -9.17282e-08, 7.04247e-08,
      -0.201343, -0.0105699, 0.000281081, -2.92293e-09, -1.07868e-09,
      -2.29953e-05, 0.00123967, -2.37571e-10, 9.12756e-10, 0.000167872,
      -0.00530038, -1.18473e-09, -4.1042e-09, 0.0107911, 0.0162154,
      1.59007e-09, -3.98742e-10, -0.0105699, -0.0461523;

  bool check_c_diag = c_diag.isApprox(c_ref.diagonal(), 1e-5);
  if (!check_c_diag) {
    cout << "Sigma C" << endl;
    cout << c_diag << endl;
    cout << "Sigma C ref" << endl;
    cout << c_ref.diagonal() << endl;
  }
  BOOST_CHECK_EQUAL(check_c_diag, true);

  bool check_c = c_ref.isApprox(c_off, 1e-5);
  if (!check_c) {
    cout << "Sigma C" << endl;
    cout << c_off << endl;
    cout << "Sigma C ref" << endl;
    cout << c_ref << endl;
  }
  BOOST_CHECK_EQUAL(check_c, true);

  sigma.set_COHSEX(true);

  Eigen::VectorXd c_diag_Hedin = sigma.CalcCorrelationDiag(mo_energy);
  Eigen::MatrixXd c_off_Hedin = sigma.CalcCorrelationOffDiag(mo_energy);

  c_off_Hedin.diagonal() = c_diag_Hedin;
  Eigen::MatrixXd c_ref_Hedin = Eigen::MatrixXd::Zero(17, 17);
  c_ref_Hedin <<
      -9.14985e-05, -1.67175e-09, -3.90983e-10, -0.000203905, 0.000229123,
      3.78284e-10, 3.11217e-09, -0.00114602, 0.00199701, 1.95231e-10,
      -2.0276e-09, 0.00322734, 0.003666, -1.87726e-09, 3.07156e-09,
      -0.0023264, 0.000439406, -1.67175e-09, -0.000700014, -1.26947e-09,
      -9.34781e-10, 4.57522e-08, 0.00217237, 0.00216817, -1.33587e-08,
      4.92695e-09, 0.00587883, -0.00620667, 1.3132e-07, 1.81263e-07,
      -0.000811433, 0.00810608, -7.08612e-08, -1.55626e-08, -3.90983e-10,
      -1.26947e-09, -0.000700004, -1.97e-10, 1.52651e-08, -0.00216813,
      0.00217235, -3.77895e-09, 2.05304e-09, 0.00620664, 0.00587878,
      4.63538e-08, 6.30105e-08, -0.00810598, -0.000811399, -2.38954e-08,
      -5.5965e-09, -0.000203905, -9.34781e-10, -1.97e-10, -0.000189653,
      0.000812358, 3.88278e-09, 1.15721e-09, -0.00139418, 0.00107603,
      -1.04502e-09, 7.29209e-10, 0.00215415, -0.0011494, -1.81963e-09,
      4.75957e-09, -0.00353207, 2.9009e-05, 0.000229123, 4.57522e-08,
      1.52651e-08, 0.000812358, -0.021542, 2.91994e-08, -4.98367e-08,
      0.00427958, -0.00475139, 1.19183e-09, 4.90028e-08, -0.0796528,
      -0.114849, 1.52417e-08, -1.08048e-09, 0.029041, 0.00825815,
      3.78284e-10, 0.00217237, -0.00216813, 3.88278e-09, 2.91994e-08,
      -0.0287834, -5.5988e-09, 2.97443e-08, 1.5121e-08, 0.00103896,
      0.0397212, 4.57488e-08, 1.11722e-07, -0.04152, -0.0508574,
      8.37594e-08, -1.93559e-09, 3.11217e-09, 0.00216817, 0.00217235,
      1.15721e-09, -4.98367e-08, -5.5988e-09, -0.0287834, -5.73583e-09,
      -3.51433e-08, -0.0397212, 0.00103899, -1.29129e-07, -1.52818e-07,
      0.0508574, -0.04152, 2.40707e-08, 6.96033e-09, -0.00114602,
      -1.33587e-08, -3.77895e-09, -0.00139418, 0.00427958, 2.97443e-08,
      -5.73583e-09, -0.0202888, -0.00231904, -2.01611e-08, -3.34669e-09,
      0.0180666, 0.015456, -9.09309e-09, 1.75928e-08, -0.0547344,
      -0.00147661, 0.00199701, 4.92695e-09, 2.05304e-09, 0.00107603,
      -0.00475139, 1.5121e-08, -3.51433e-08, -0.00231904, -0.0308425,
      -1.91636e-08, 1.32064e-09, -0.00798182, -0.00626755, 1.45898e-08,
      -1.61654e-08, -0.0174081, -0.0109013, 1.95231e-10, 0.00587883,
      0.00620664, -1.04502e-09, 1.19183e-09, 0.00103896, -0.0397212,
      -2.01611e-08, -1.91636e-08, -0.094813, 1.1439e-08, 1.20519e-08,
      2.63387e-08, 0.0883324, -0.0683446, -5.17582e-08, -5.58435e-09,
      -2.0276e-09, -0.00620667, 0.00587878, 7.29209e-10, 4.90028e-08,
      0.0397212, 0.00103899, -3.34669e-09, 1.32064e-09, 1.1439e-08,
      -0.094813, 1.03793e-07, 1.70707e-07, 0.0683445, 0.0883325,
      -2.55903e-08, -1.28023e-08, 0.00322734, 1.3132e-07, 4.63538e-08,
      0.00215415, -0.0796528, 4.57488e-08, -1.29129e-07, 0.0180666,
      -0.00798182, 1.20519e-08, 1.03793e-07, -0.220347, -0.283449,
      5.00993e-08, -2.47466e-08, 0.111138, 0.0278145, 0.003666,
      1.81263e-07, 6.30105e-08, -0.0011494, -0.114849, 1.11722e-07,
      -1.52818e-07, 0.015456, -0.00626755, 2.63387e-08, 1.70707e-07,
      -0.283449, -0.427511, 3.73457e-08, 4.68073e-08, 0.114863,
      0.0358496, -1.87726e-09, -0.000811433, -0.00810598, -1.81963e-09,
      1.52417e-08, -0.04152, 0.0508574, -9.09309e-09, 1.45898e-08,
      0.0883324, 0.0683445, 5.00993e-08, 3.73457e-08, -0.211099,
      3.17271e-08, -4.71019e-08, -2.45896e-09, 3.07156e-09, 0.00810608,
      -0.000811399, 4.75957e-09, -1.08048e-09, -0.0508574, -0.04152,
      1.75928e-08, -1.61654e-08, -0.0683446, 0.0883325, -2.47466e-08,
      4.68073e-08, 3.17271e-08, -0.211099, 7.91818e-08, -9.45336e-10,
      -0.0023264, -7.08612e-08, -2.38954e-08, -0.00353207, 0.029041,
      8.37594e-08, 2.40707e-08, -0.0547344, -0.0174081, -5.17582e-08,
      -2.55903e-08, 0.111138, 0.114863, -4.71019e-08, 7.91818e-08,
      -0.210362, -0.0187364, 0.000439406, -1.55626e-08, -5.5965e-09,
      2.9009e-05, 0.00825815, -1.93559e-09, 6.96033e-09, -0.00147661,
      -0.0109013, -5.58435e-09, -1.28023e-08, 0.0278145, 0.0358496,
      -2.45896e-09, -9.45336e-10, -0.0187364, -0.0499554;

  bool check_c_diag_Hedin = c_diag_Hedin.isApprox(c_ref_Hedin.diagonal(), 1e-5);
  if (!check_c_diag_Hedin) {
    cout << "Sigma C (Hedin)" << endl;
    cout << c_diag_Hedin << endl;
    cout << "Sigma C ref (Hedin)" << endl;
    cout << c_ref_Hedin.diagonal() << endl;
  }
  BOOST_CHECK_EQUAL(check_c_diag_Hedin, true);

  bool check_c_Hedin = c_ref_Hedin.isApprox(c_off_Hedin, 1e-5);
  if (!check_c_Hedin) {
    cout << "Sigma C (Hedin)" << endl;
    cout << c_off_Hedin << endl;
    cout << "Sigma C ref (Hedin)" << endl;
    cout << c_ref_Hedin << endl;
  }
  BOOST_CHECK_EQUAL(check_c_Hedin, true);
}

BOOST_AUTO_TEST_SUITE_END()
